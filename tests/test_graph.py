# import pytest

from pathfinding.graph import Grid


def test_size_grid():
    square = """######
#....#
#....#
#....#
#....#
######"""
    grid = Grid(6, 6)
    assert grid.h == 6
    assert grid.w == 6


def test_load_grid():
    square = """######
#....#
#....#
#....#
#....#
######"""
    grid = Grid(6, 6)
    grid.load(square.splitlines())
    assert square == "{}".format(grid)


def test_point_grid():
    square = """######
#....#
#....#
#....#
#....#
######"""
    grid = Grid(6, 6)
    grid.load(square.splitlines())
    start = (1, 1)
    assert grid.square(start) == "."

    assert list(grid.neighbors(start)) == [
        (1, 2),
        (2, 1),
    ]


def test_exploration():
    square = """???
?.?
???"""
    grid = Grid(3, 3)
    grid.load(square.splitlines())
    assert grid.unknown((1, 1)) is True

    assert list(grid.incognita()) == [(1, 1)]



def test_direction():
    square = """...
...
..."""
    grid = Grid(3, 3)
    grid.load(square.splitlines())
    pt = (1, 1)
    up = (0, 1)
    down = (2, 1)
    left = (1, 0)
    right =(1, 2)

    assert grid.direction(pt, up) == "UP"
    assert grid.direction(pt, down) == "DOWN"
    assert grid.direction(pt, left) == "LEFT"
    assert grid.direction(pt, right) == "RIGHT"


def test_explore_path():
    square = """??????
?####?
?....?
?####?
??????"""
    grid = Grid(6, 5)
    grid.load(square.splitlines())
    pt1 = (2, 1)
    pt2 = (2, 4)
    assert list(grid.incognita()) == [pt1, pt2]

    pt = (2, 3)

    assert grid.explore(pt) == pt2

    assert grid.move(pt) == "RIGHT"


def test_distance():
    square = """######
T....C
######"""
    grid = Grid(6, 3)
    grid.load(square.splitlines())
    assert grid.room() == (1, 5)
    assert grid.gate() == (1, 0)

    assert len(grid.bfs(grid.room(), grid.gate())) == 5


def test_maze():
    square = """???????????????????????...##??
???????????????????????#####??
???????????????????????...##??
???????????????????????####.??
???????????????????????####.??
??????????????????????????????
??????????????????????????????
??????????????????????????????
??????????????????????????????
??????????????????????????????
??????????????????????????????
??????????????????????????????
??????????????????????????????
??????????????????????????????
??????????????????????????????"""

    grid = Grid(15, 30, 21)
    grid.load(square.splitlines())

    kirk = (2, 25)

    pt = (3, 27)

    assert grid.bfs(kirk, pt) == []

    move = grid.move(kirk)
    assert move == "LEFT"


def test_shortest_path():
    square = """?#############################
#............................#
#.#######################.#..#
#.....T.................#.#..#
#.....#.................#.#..#
#.#######################.#..#
#.....##......##......#....###
#...####..##..##..##..#..#...#
#.........##......##.....#...#
###########################.##
#......#......#..............#
#...C..#.....................#
#...#..####################..#
#............................#
##############################"""
    grid = Grid(15, 30, 70)
    grid.load(square.splitlines())

    len(grid.bfs(grid.room(), grid.gate())) == 70

    kirk = (12, 1)
    move = grid.move(kirk)
    assert move == "RIGHT"
